1.前端开发出现的问题：
  （1）JS文件的内容越来越多（面向过程）
  问题：代码量很多，文件会越来越大，不容易维护。
  （2）把JS文件的功能拆分成多个文件，在一个入口文件中使用new创建对象（面向对象）
  问题：可能会引入多个文件，加载速度变慢。从入口文件中的new看不出这个对象对应的
        文件对应哪个文件。文件引入顺序会导致错误，代码不容易维护。
  （3）在入口文件中使用import。（ES Module引入方式，如果直接使用浏览器会报错，可
      以使用webpack进行“翻译”，使浏览器可以识别）
  优点：可以看清文件对应的关系，html中只引入了入口文件速度较快，文件import顺序不会
        影响功能。
2.模块引入方式有多种，有ES Module，CommonJS（Node常用），CMD，ADM。
3.webpack是什么？是Bundler，模块打包工具，import中引入的就是模块。一开始的webpack
  只能打包js文件，如今可以打包其他文件，如css文件，图片文件。
4.搭建webpack环境：webpack是基于NodeJS开发的模块打包工具，所以要先安装NodeJS。
  安装完之后使用npm init在文件夹下生成一个package.json文件。
  修改配置，“private”：true，表示项目是私有，不会被发布到npm线上仓库。
  “main”的配置去掉，表示不对外暴露。
  “scripts”的配置可以配置一些命令。
  全局安装：npm install webpack webpack-cli -g （不推荐）
  全局卸载：npm uninstall webpack webpack-cli -g
  局部安装：npm install webpack webpack-cli --save-dev (--save-dev可以改成-D)
  安装具体版本：npm install webpack@4.16.0 webpack-cli -D
  查询全局：webpack -v 在全局获取版本号
  查询本地：npx webpack -v 在本项目获取版本号
  打包：(npx) webpack index.json
5.webpack的配置文件webpack.config.js。可以在里面指定生成目录路径，目录名字，以及入口
  js的名字。如果配置文件不叫webpack.config.js，要使用(npx) webpack --config 文件名
  进行打包。进行打包的文件index.jx不在浏览器上直接运行，真正运行的是打包后生成的js文件，
  index.js称为源代码，一般放在src目录下。
  在package.js配置scripts，“bundle”：“webpack”。之后可以使用npm run bundle 进行打包。
  配置了之后打包的过程中会首先找本地的webpack，如果没找到再找全局的webpack。
6.webpack-cli的作用是使webpack命令可以在命令行工具里正确运行。
7.打包的时候在命令行输出的信息。Hash本次打包的唯一哈希值。version本次打包使用的webpack版
  本。time是打包耗时。
8.webpack默认配置是只能打包js文件，如果要打包其他类型的文件需要借助于loader。在webpack的
  配置文件中添加module，在里面添加rules数组，在数组里面添加对象，属性test是匹配文件后缀的
  正则表达式，对象属性use添加的是使用的loader名称，对象属性options里面可以修改生成文件的
  名字。如果要使用多个loader，user可以使用数组形式，加载顺序是从下到上，从右到左。
9.file-loader可以把文件打包到某个目录下。url-loader将文件以DataURL的形式的url写入js文件
  里面（适用于小文件），可以加上一个limit属性来根据文件大小判断文件是生成到目录下还是变成
  DataURL。
10.sass-loader可以识别scss文件（同时要安装node-sass），css-loader可以打包css文件，
   style-loader可以把css挂载到页面顶部，postcss-loader可以在css3语法前面自动添加浏览器厂
   商的前缀（要配合postcss.confit.js配置文件进行设置，同时要安装autoprefixer插件，如果配
   置不成功，在package.json里面添加browserslist配置项）。
11.入口文件引入的样式文件会作用于全局，需要用模块化css来解决这个问题，在css-loader中把modules
   设置为true，并在引入css文件时给它定义一个名字。
12.打包的时候如果要使用字体样式，比如iconfont，可以使用file-loader根据后缀进行配置。
13.每次打包完都需要配置index.html比较麻烦，可以使用HtmlWebpackPlugin插件进行自动化生成一个
   index.html文件在dist目录下，还可以对这个文件的模板进行定义。
14.webpack的plugin主要作用是，当webpack运行到某个时刻的时候，帮webpack做一些事情，有点类似
   生命周期函数的功能。
15.SourceMap是一个映射关系，它知道打包生成之后的js文件中的代码对应的源码在哪个文件的哪一行，方便
   修改和排错。在配置文件中添加属性devtool: 'source-map'。
   最佳实践：cheap-module-eval-source-map（development开发环境）
            cheao-module-source-map（production生产环境）
16.WebpackDevServer可以提升开发效率。
   要实现修改入口文件index.js，webpack自动重新打包的做法：
   第一种、在package.jso的scripts中，把前面写的"webpack"改为"webpack --watch"。实现自动监听。
   第二种、使用WebpackDevServer。
17.热更新模块，修改css样式和js模块的内容的时候，不会刷新页面。
18.使用babel处理ES6语法。安装babel-loader，@babel/core，@babel/preset-env，再按webpack文档进行
   配置。@babel/polyfill可以帮助添加一些低版本浏览器所需要的内容。
   {
      test: /\.js$/,
      exclude: /(node_modules|bower_components)/,
      use: {
         loader: 'babel-loader',
         options: {
         presets: [['@babel/preset-env', {
            targets: {
               chrome: '67',
            },
            useBuiltIns: 'usage'
         }]]
         }
      }
   }
   这样配置的话会自动引入@babel/polyfill，不需要自己手动引入。
19.TreeShaking可以把引入模块里面不需要的代码给剔除，只支持ES Module的引入方式（import）。在开发
   模式development下，在配置文件中添加，optimization，useExports为true。在package.json中添加
   sideEffects：['@babel/polly-fill']，意思是使用TreeShaking时忽略该文件，这个配置主要针对
   @babel/polly-fill这种需要引入但是有可能并没有用到里面的资源的包，如果直接设置为false，意思为
   对所有文件都使用TreeShaking。production环境下可以不写optimization。
20.引入webpack-merge插件可以帮助对配置文件进行拆分。项目开发时，可以把配置文件分成开发环境跟线上
   环境的两个文件，然后把两个文件公用的部分再抽离出来写入另一个新的文件，最后通过webpack-merge插件
   把文件关联起来使用。
21.代码分割Code Splitting。在index.js中引入第三方的库时，webpack会把第三方库跟业务代码一起打包，
   这样子文件会变得很大。
   手动分割：此时可以把第三方库放在另一个js文件里，并使用window.名字 = 第三方库，把第
   库保存到一个window的全局变量里面，在配置文件中的入口里配置这个新的js文件。这样可以把业务代码分
   割开来。
   自动分割：在配置文件中的optimization中添加一个splitChunks的属性，在里面添加一个chunks:'all'的
   配置项，即可完成自动分割。
22.把文件拆分开来之后，页面第二次加载的时候由于库文件有缓存所以会变得比较快，但是第一次加载的速度还是
   很慢，此时就需要Prefetching和Preloading的工具。webpack支持开发者对文件使用异步加载的方式进行引入，
   即按需引入，可以提高代码的利用率，优化代码。推荐使用Prefetching辅助使用。它的作用是在首次加载的时候
   把必要的资源加载完成，网络资源空闲出来之后再加载其他资源。这样做的好处就是当用户点击某些功能之前就可
   以提前把资源加载完。
23.浏览器对文件有缓存的属性，当项目上线之后再修改里面的js代码，但是最后webpack打包生成的文件的名字没有
   改变，所有用户再次加载页面，页面不会发生任何变化，没有加载到最新的资源。可以在webpack打包文件的时候，
   给用户名加上一个contenthash的命名，如果开发者修改了代码重新打包，这个contenthash就会发生变化，发布
   项目之后因为名字发生了变化，所以用户访问网站会加载到最新的资源。
24.垫片Shimming。有的第三方库会依赖一些其他的库，比如某个jQuery编写的UI库要依赖jQuery，或自己编写的库
   依赖jQuery。webpack是基于模块进行打包，变量只会在当前模块中生效。如果是自己编写的库可以通过import
   来引入jQuery，但是其他第三方的库可能是属于node_modules目录下的，不能进行修改，此时需要垫片Shimming
   的帮助。在配置文件中使用webpack.ProvidePlugin插件，在里面配置jQuery对应的符号为$即可，同理其他库也
   可以做类似的配置。模块中的this对应指向的是模块本身，如果要让它指向window，可以使用imports-loader。
25.前端做开发的时候肯定会遇到发送ajax请求到服务器获取数据的情况，开发环境跟线上环境的服务器可能不一样，
   意味着请求的地址也不一样，所以在编写ajax请求的时候不会写绝对路径。此时可以在webpack的配置文件中的
   devServer中添加proxy配置，让webpack帮助转发请求。
26.单页面路由在webpack上应该在配置文件中加入一个配置，historyApiFallback：true。
27.webpack性能优化。
   (1)跟上技术的迭代，如升级node版本，npm版本，webpack版本。
   (2)在尽可能少的模块上使用户loader。比如使用babel-loader的时候，配置文件中加上exclude或者include来
   指定使用该loader的文件，减少不必要的loader使用。
   (3)plugin尽可能精简并确保可靠，尽量使用webpack官方推荐的插件。
   (4)合理配置resolve里面的参数。
   (5)使用DllPlugin提高打包速度。