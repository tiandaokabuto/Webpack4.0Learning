1.前端开发出现的问题：
  （1）JS文件的内容越来越多（面向过程）
  问题：代码量很多，文件会越来越大，不容易维护。
  （2）把JS文件的功能拆分成多个文件，在一个入口文件中使用new创建对象（面向对象）
  问题：可能会引入多个文件，加载速度变慢。从入口文件中的new看不出这个对象对应的
        文件对应哪个文件。文件引入顺序会导致错误，代码不容易维护。
  （3）在入口文件中使用import。（ES Module引入方式，如果直接使用浏览器会报错，可
      以使用webpack进行“翻译”，使浏览器可以识别）
  优点：可以看清文件对应的关系，html中只引入了入口文件速度较快，文件import顺序不会
        影响功能。
2.模块引入方式有多种，有ES Module，CommonJS（Node常用），CMD，ADM。
3.webpack是什么？是Bundler，模块打包工具，import中引入的就是模块。一开始的webpack
  只能打包js文件，如今可以打包其他文件，如css文件，图片文件。
4.搭建webpack环境：webpack是基于NodeJS开发的模块打包工具，所以要先安装NodeJS。
  安装完之后使用npm init在文件夹下生成一个package.json文件。
  修改配置，“private”：true，表示项目是私有，不会被发布到npm线上仓库。
  “main”的配置去掉，表示不对外暴露。
  “scripts”的配置可以配置一些命令。
  全局安装：npm install webpack webpack-cli -g （不推荐）
  全局卸载：npm uninstall webpack webpack-cli -g
  局部安装：npm install webpack webpack-cli --save-dev (--save-dev可以改成-D)
  安装具体版本：npm install webpack@4.16.0 webpack-cli -D
  查询全局：webpack -v 在全局获取版本号
  查询本地：npx webpack -v 在本项目获取版本号
  打包：(npx) webpack index.json
5.webpack的配置文件webpack.config.js。可以在里面指定生成目录路径，目录名字，以及入口
  js的名字。如果配置文件不叫webpack.config.js，要使用(npx) webpack --config 文件名
  进行打包。进行打包的文件index.jx不在浏览器上直接运行，真正运行的是打包后生成的js文件，
  index.js称为源代码，一般放在src目录下。
  在package.js配置scripts，“bundle”：“webpack”。之后可以使用npm run bundle 进行打包。
  配置了之后打包的过程中会首先找本地的webpack，如果没找到再找全局的webpack。
6.webpack-cli的作用是使webpack命令可以在命令行工具里正确运行。
7.打包的时候在命令行输出的信息。Hash本次打包的唯一哈希值。version本次打包使用的webpack版
  本。time是打包耗时。
8.webpack默认配置是只能打包js文件，如果要打包其他类型的文件需要借助于loader。在webpack的
  配置文件中添加module，在里面添加rules数组，在数组里面添加对象，属性test是匹配文件后缀的
  正则表达式，对象属性use添加的是使用的loader名称，对象属性options里面可以修改生成文件的
  名字。如果要使用多个loader，user可以使用数组形式，加载顺序是从下到上，从右到左。
9.file-loader可以把文件打包到某个目录下。url-loader将文件以DataURL的形式的url写入js文件
  里面（适用于小文件），可以加上一个limit属性来根据文件大小判断文件是生成到目录下还是变成
  DataURL。
10.sass-loader可以识别scss文件（同时要安装node-sass），css-loader可以打包css文件，
   style-loader可以把css挂载到页面顶部，postcss-loader可以在css3语法前面自动添加浏览器厂
   商的前缀（要配合postcss.confit.js配置文件进行设置，同时要安装autoprefixer插件，如果配
   置不成功，在package.json里面添加browserslist配置项）。
11.入口文件引入的样式文件会作用于全局，需要用模块化css来解决这个问题，在css-loader中把modules
   设置为true，并在引入css文件时给它定义一个名字。
12.打包的时候如果要使用字体样式，比如iconfont，可以使用file-loader根据后缀进行配置。
13.每次打包完都需要配置index.html比较麻烦，可以使用HtmlWebpackPlugin插件进行自动化生成一个
   index.html文件在dist目录下，还可以对这个文件的模板进行定义。
14.webpack的plugin主要作用是，当webpack运行到某个时刻的时候，帮webpack做一些事情，有点类似
   生命周期函数的功能。
15.SourceMap是一个映射关系，它知道打包生成之后的js文件中的代码对应的源码在哪个文件的哪一行，方便
   修改和排错。在配置文件中添加属性devtool: 'source-map'。
   最佳实践：cheap-module-eval-source-map（development开发环境）
            cheao-module-source-map（production生产环境）
16.WebpackDevServer可以提升开发效率。
   要实现修改入口文件index.js，webpack自动重新打包的做法：
   第一种、在package.jso的scripts中，把前面写的"webpack"改为"webpack --watch"。实现自动监听。
   第二种、使用WebpackDevServer。
17.热更新模块，修改css样式和js模块的内容的时候，不会刷新页面。